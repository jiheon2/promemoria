replicaCount: 3

zookeeper:
  enabled: false

kafkaKraft:
  enabled: true
  configurationOverrides:
    # KRaft 모드 설정
    process.roles: broker,controller
    node.id: "${HOSTNAME##*-}"
    controller.quorum.voters: |
      0@kafka-0.kafka-headless.kopo-trainee20.svc.cluster.local:9093,\
      1@kafka-1.kafka-headless.kopo-trainee20.svc.cluster.local:9093,\
      2@kafka-2.kafka-headless.kopo-trainee20.svc.cluster.local:9093
    listeners: "INTERNAL://:9092,EXTERNAL://:19092,CONTROLLER://:9093"
    advertised.listeners: |
      INTERNAL://kafka-$(hostname -s).kafka-headless.kopo-trainee20.svc.cluster.local:9092,\
      EXTERNAL://your.external.host:19092
    listener.security.protocol.map: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
    inter.broker.listener.name: INTERNAL
    controller.listener.names: CONTROLLER
    log.dirs: "/var/lib/kafka/data"
    num.partitions: 3
    default.replication.factor: 3
    min.insync.replicas: 2
    offsets.topic.replication.factor: 3
    transaction.state.log.replication.factor: 3
    transaction.state.log.min.isr: 2

kafka:
  service:
    type: ClusterIP
    port: 9092
    externalPort: 19092
    nodePorts:
      client: 30092
    annotations:
    # 필요한 경우 서비스에 대한 추가 어노테이션을 여기에 추가하세요
  persistence:
    enabled: true
    size: 20Gi
    storageClass: "nks-block-storage"

resources:
  limits:
    cpu: "1"
    memory: "2Gi"
  requests:
    cpu: "1"
    memory: "2Gi"

metrics:
  kafka:
    enabled: true

prometheus:
  operator:
    enabled: false

jmx:
  enabled: true

livenessProbe:
  initialDelaySeconds: 30
  timeoutSeconds: 10

readinessProbe:
  initialDelaySeconds: 30
  timeoutSeconds: 10

logging:
  levels:
    rootLogger.level: INFO
